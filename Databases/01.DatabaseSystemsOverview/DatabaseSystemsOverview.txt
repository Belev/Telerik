01. What database models do you know?
	- Object-Oriented Model
	- Relational Model (table)
	- Hierarchical Model (tree)
	- Network Model (graph)
	- and others ...
	
02. Which are the main functions performed by a Relational Database Management System (RDBMS)?
	- DBMS is designed to manage a database. Relational DBMS are very old and mature systems.
	- RDBMS main functions:
		* Using for management of relational data stored in tables.
		* Definition of database schemas.
		* Creating, modifying, deleting tables and relationships between them.
		* Adding, modifying, deleting, searching and retrieving data stored in tables.
		* SQL Language Support.
		* Management (maintenance) of transactions.
	
03. Define what is "table" in database terms.
	- Table is a structured format within database where the data is stored. The data in tables is organized in rows and columns.
	- Columns have name and type. They are used to represent characteristics about certain stored data.
	- Rows are used to store a single record of data.
	
04. Explain the difference between a primary and a foreign key.
	- Primary key is used to uniquely identify certain row. It appears only once in a certain column.
	- Foreign keys are used to avoid duplicate data. Can be represented by number or string (better by number).
	  The duplicate data must be separated in another table with primary keys the once which are used in the master table.
	  Foreign keys are not unique and can be used more than once in certain column.
	
05. Explain the different kinds of relationships between tables in relational databases.
	- There are four kind of relationships - one-to-one, one-to-many, many-to-many, self-join-relationship.
		* One-to-one (relationship of two items in which one can only belong with the other) - person <- student
		* One-to-many (relationship of two items in which one can have many with of the other) - town -> neighbourhoods (one town have got many neighbourhoods)
		* Many-to-many (relationship of two items in which one can have many with of the other and the opposite) - courses <-> students (students are taking many courses, and every course have got its students)
		* Self-join-relationship (relationship in which both match fields are defined in the same table) - e.g. 1. Root <- 2. Documents (ParentId: 1) <- 3. Pictures (1) <- 4. Birthday Party (3)

06. When is a certain database schema normalized? What are the advantages of normalized databases?
	- A certain database schema is normalized when there is no duplicate of any data.
	- Normalization is the process of removing any repeating data in a table. If there was a duplication, the duplicated data is separate in different table.
	- Advantages - avoid data duplication.
	
07.What are database integrity constraints and when are they used? 
    -  Set some data rules which cannot be violated.
	- Ensure data integrity in the database tables.
	
    - Used for Primary key:
        * Ensures unique value for each table row.
    - Used for Unique key:
        * Ensures that all values in a certain column are unique.
    - Used for Foreign key:
        * Ensures that the value in given column is a key from another table.
    - Used for Check constraint (data restriction):
        * Ensures that values in a certain column meet some predefined condition.

08.Point out the pros and cons of using indexes in a database.
	- Cons: 
        * Writing, adding, deleting records in indexed tables is slower.
        * May cause the system to restructure the index of structure (Hash Index, B-Tree, etc), which can be very computationally expensive.
        * Stores more data, so it uses more memory.

	- Pros:
        * Faster lookup for results in certain column or group of columns. 
        * It uses index structures such as B-Trees or Hash Indexes to speed up searching of values instead of scanning the entire table for the results.

09.What's the main purpose of the SQL language?
	- Structured query language (SQL) is a special-purpose programming language designed for managing data held in a RDBMS
	- SQL consist of a data definition language (DDL) and a data manipulation language (DML).
	- DDL:
        * Creating, altering, deleting tables and other objects in the database.

    - DML:
        * Searching, retrieving, inserting, modifying and deleting table data (rows).

10.What are transactions used for? Give an example.
	- It is used to protect data and keep it consistent when multiple users access the database at the same time.
	- Execute sequence of operations as a single unit.
	
	- Example:
		* Withdraw money steps
			1) Verify account details.
			2) Accept withdrawal request
			3) Check balance
			4) Update balance
			4) Dispense money

		* Suppose your account balance is 1000$ and you make a withdrawal request of 900$.
		* At fourth step your balance is updated to 900$ and ATM machine stops working due to power outage.
		* Once power comes back and you again tried to withdraw money you surprised by seeing your balance just 100$ instead of 1000$.
		* This is not acceptable by any person in the world :) so we need transaction to perform such task.
		* If SQL statements would have been executed inside transaction in database balance would be either 100$ until money has been dispensed
		* or 1000$ if money has not been dispensed.

11.What is a NoSQL database?
	- Database without relationships. The documents did not have fixed structure.
	- It uses document-based model (non-relational)
    - Data stored as documents. A single document (entity) is a single record.
	- In one record we can have what we want (cars, human, carrots, and so on...)
	
12.Explain the classical non-relational data models.
	- The most used data model is the document-based model. It uses key-value pairs instead of tables (as it is in the RDBMS).
	- The most popular emerging non-relational database is called NoSQL (Not Only SQL).
	
13.Give few examples of NoSQL databases and their pros and cons.
	- Databases:
        * Cassandra (Distributed wide-column database)
        * MongoDB (Mature and powerful JSON-Document database)
        * CouchDB (JSON-based document database with REST API)
        * Redis (Ultra-fast in-memory data structures server)
        * H-Base
        * and others ...
	
	- Pros: 
        * Support CRUD operations
        * Support indexing and querying
        * Support concurrency and transactions
        * Highly optimized for append / retrieve
        * Great performance and scalability
        * and others ...

    - Cons:
        * Difficult administration and support
		* Not as mature as the RDBMS
        * and others ...